'use strict';

var react = require('@legendapp/state/react');
var state = require('@legendapp/state');
var react$1 = require('react');

if (process.env.NODE_ENV === 'development' && !state.internal.globalState.noDepWarn) {
    console.warn('[legend-state]: react-components are deprecated and will be removed in version 2.0. Please use the new Reactive components instead: http://www.legendapp.com/open-source/state/fine-grained-reactivity/#reactive-components.');
}
const bindables = new Set(['input', 'textarea', 'select']);
const bindInfo = { value: { handler: 'onChange', getValue: (e) => e.target.value, defaultValue: '' } };
const bindInfoInput = Object.assign({ checked: { handler: 'onChange', getValue: (e) => e.target.checked } }, bindInfo);
const Legend = new Proxy({}, {
    get(target, p) {
        if (!target[p]) {
            // Create a wrapper around createElement with the string so we can proxy it
            // eslint-disable-next-line react/display-name
            const render = react$1.forwardRef((props, ref) => {
                const propsOut = { ...props };
                if (ref && (state.isFunction(ref) || !state.isEmpty(ref))) {
                    propsOut.ref = ref;
                }
                return react$1.createElement(p, propsOut);
            });
            target[p] = react.reactive(render, bindables.has(p) ? (p === 'input' ? bindInfoInput : bindInfo) : undefined);
        }
        return target[p];
    },
});

Object.defineProperty(exports, 'observer', {
    enumerable: true,
    get: function () { return react.observer; }
});
Object.defineProperty(exports, 'reactive', {
    enumerable: true,
    get: function () { return react.reactive; }
});
Object.defineProperty(exports, 'reactiveObserver', {
    enumerable: true,
    get: function () { return react.reactiveObserver; }
});
exports.Legend = Legend;
//# sourceMappingURL=react-components.js.map
