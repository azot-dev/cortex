'use strict';

var react = require('@legendapp/state/react');
var state = require('@legendapp/state');
var react$1 = require('react');
var reactNative = require('react-native');

if (process.env.NODE_ENV === 'development' && !state.internal.globalState.noDepWarn) {
    console.warn('[legend-state]: react-native-components are deprecated and will be removed in version 2.0. Please use the new Reactive components instead: http://www.legendapp.com/open-source/state/fine-grained-reactivity/#reactive-components.');
}
const bindables = {
    TextInput: {
        handler: 'onChange',
        getValue: (e) => e.nativeEvent.text,
        defaultValue: '',
    },
    Switch: { handler: 'onValueChange', getValue: (e) => e, defaultValue: false },
};
const Components = {
    ActivityIndicator: reactNative.ActivityIndicator,
    Button: reactNative.Button,
    FlatList: reactNative.FlatList,
    Image: reactNative.Image,
    Pressable: reactNative.Pressable,
    ScrollView: reactNative.ScrollView,
    SectionList: reactNative.SectionList,
    Switch: reactNative.Switch,
    Text: reactNative.Text,
    TextInput: reactNative.TextInput,
    TouchableWithoutFeedback: reactNative.TouchableWithoutFeedback,
    View: reactNative.View,
};
const Legend = new Proxy({}, {
    get(target, p) {
        if (!target[p]) {
            // Create a wrapper around createElement with the string so we can proxy it
            // eslint-disable-next-line react/display-name
            const render = react$1.forwardRef((props, ref) => {
                const propsOut = { ...props };
                if (ref && (state.isFunction(ref) || !state.isEmpty(ref))) {
                    propsOut.ref = ref;
                }
                return react$1.createElement(Components[p], propsOut);
            });
            target[p] = react.reactive(render, bindables[p] &&
                {
                    value: bindables[p],
                });
        }
        return target[p];
    },
});

Object.defineProperty(exports, 'observer', {
    enumerable: true,
    get: function () { return react.observer; }
});
Object.defineProperty(exports, 'reactive', {
    enumerable: true,
    get: function () { return react.reactive; }
});
Object.defineProperty(exports, 'reactiveObserver', {
    enumerable: true,
    get: function () { return react.reactiveObserver; }
});
exports.Legend = Legend;
//# sourceMappingURL=react-native-components.js.map
