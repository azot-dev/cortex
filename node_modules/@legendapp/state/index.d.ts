export { afterBatch, batch, beginBatch, endBatch } from './src/batching';
export { computed } from './src/computed';
export { configureLegendState } from './src/config';
export { event } from './src/event';
export { computeSelector, constructObjectWithPath, deconstructObjectWithPath, getObservableIndex, isObservable, isObservableValueReady, lockObservable, mergeIntoObservable, opaqueObject, setAtPath, setInObservableAtPath, setSilently, } from './src/helpers';
export { isArray, isBoolean, isEmpty, isFunction, isObject, isPrimitive, isPromise, isString, isSymbol, } from './src/is';
export { observable, observablePrimitive } from './src/observable';
export * from './src/observableInterfaces';
export { observe } from './src/observe';
export { proxy } from './src/proxy';
export { trackSelector } from './src/trackSelector';
export { when, whenReady } from './src/when';
import { getProxy, set } from './src/ObservableObject';
import { ensureNodeValue, findIDKey, get, getNode, peek, setNodeValue } from './src/globals';
import { setAtPath } from './src/helpers';
export declare const internal: {
    ensureNodeValue: typeof ensureNodeValue;
    findIDKey: typeof findIDKey;
    get: typeof get;
    getNode: typeof getNode;
    getProxy: typeof getProxy;
    globalState: {
        isLoadingLocal: boolean;
        isLoadingRemote: boolean;
        isMerging: boolean;
        noDepWarn: boolean;
    };
    optimized: symbol;
    peek: typeof peek;
    set: typeof set;
    setAtPath: typeof setAtPath;
    setNodeValue: typeof setNodeValue;
    symbolDelete: symbol;
};
