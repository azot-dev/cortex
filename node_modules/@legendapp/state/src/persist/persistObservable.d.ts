import type { ClassConstructor, FieldTransforms, Observable, ObservableObject, ObservablePersistLocal, ObservablePersistRemote, ObservablePersistState, ObservableWriteable, PersistOptions, TypeAtPath } from '@legendapp/state';
export declare const mapPersistences: WeakMap<ClassConstructor<ObservablePersistLocal | ObservablePersistRemote>, {
    persist: ObservablePersistLocal | ObservablePersistRemote;
    initialized?: Observable<boolean>;
}>;
export declare const persistState: ObservableObject<{
    inRemoteSync: boolean;
}>;
export declare function adjustSaveData(value: any, path: string[], pathTypes: TypeAtPath[], { adjustData, fieldTransforms, }: {
    adjustData?: {
        save?: (value: any) => any;
    };
    fieldTransforms?: FieldTransforms<any>;
}): {
    value: any;
    path: string[];
} | Promise<{
    value: any;
    path: string[];
}>;
export declare function adjustLoadData(value: any, { adjustData, fieldTransforms, }: {
    fieldTransforms?: FieldTransforms<any>;
    adjustData?: {
        load?: (value: any) => any;
    };
}, doUserAdjustData: boolean): Promise<any> | any;
export declare function onChangeRemote(cb: () => void): void;
export declare function persistObservable<T>(obs: ObservableWriteable<T>, persistOptions: PersistOptions<T>): ObservableObject<ObservablePersistState>;
